//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `CommonIPC.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __CommonIPC_h__
#define __CommonIPC_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 8
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace BGI
{

namespace RPC
{

class BGIRemoteException : public ::Ice::UserExceptionHelper<BGIRemoteException, ::Ice::UserException>
{
public:

    virtual ~BGIRemoteException();

    BGIRemoteException(const BGIRemoteException&) = default;

    BGIRemoteException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    BGIRemoteException(const ::std::string& message) :
        message(message)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(message);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string message;
};

/// \cond INTERNAL
static BGIRemoteException _iceS_BGIRemoteException_init;
/// \endcond

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::BGI::RPC::BGIRemoteException, S>
{
    static void read(S* istr, ::BGI::RPC::BGIRemoteException& v)
    {
        istr->readAll(v.message);
    }
};

}
/// \endcond

#else // C++98 mapping

namespace BGI
{

namespace RPC
{

class BGIRemoteException : public ::Ice::UserException
{
public:

    BGIRemoteException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit BGIRemoteException(const ::std::string& message);

#ifdef ICE_CPP11_COMPILER
    BGIRemoteException(const BGIRemoteException&) = default;
    virtual ~BGIRemoteException();
#else
    virtual ~BGIRemoteException() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual BGIRemoteException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string message;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static BGIRemoteException _iceS_BGIRemoteException_init;
/// \endcond

}

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::BGI::RPC::BGIRemoteException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::BGI::RPC::BGIRemoteException, S>
{
    static void write(S* ostr, const ::BGI::RPC::BGIRemoteException& v)
    {
        ostr->write(v.message);
    }
};

template<typename S>
struct StreamReader< ::BGI::RPC::BGIRemoteException, S>
{
    static void read(S* istr, ::BGI::RPC::BGIRemoteException& v)
    {
        istr->read(v.message);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
