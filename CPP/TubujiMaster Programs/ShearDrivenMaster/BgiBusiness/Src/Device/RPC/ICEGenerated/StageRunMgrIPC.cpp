//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `StageRunMgrIPC.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "StageRunMgrIPC.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 8
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ids[2] =
{
    "::BGI::RPC::StageRunMgrIPC",
    "::Ice::Object"
};
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ops[] =
{
    "AbortScript",
    "Authenicate",
    "ClearAlarmMessages",
    "DownloadScriptFile",
    "GetAlarmMessages",
    "GetExperimentInfo",
    "GetHeartbeat",
    "GetLanguage",
    "GetLogMessages",
    "GetParaValue",
    "GetQCValues",
    "GetScriptMessages",
    "GetScriptRunInfo",
    "GetSequenceTypes",
    "GetZLIMSAddr",
    "MotorMove",
    "OverrideFlowcellBarcode",
    "PauseScript",
    "ReagentNeedle",
    "ResumeScript",
    "RunScriptNow",
    "SaveSelectedScriptFileName",
    "ScanFlowcellBarcode",
    "ScanReagentKitBarcode",
    "SendExperimentType",
    "SendReagentKit",
    "SendSampleId",
    "SetBaseCallIpAddr",
    "SetBuzzerVolume",
    "SetCategoryParas",
    "SetClearData",
    "SetLanguage",
    "SetZLIMSIpAddr",
    "SetupRunInfo",
    "SetupScriptFile",
    "StartRun",
    "StartRunLength",
    "StartSelfCheck",
    "StartSetup",
    "StopScript",
    "UIOperation",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name = "GetHeartbeat";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name = "StartSetup";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name = "SaveSelectedScriptFileName";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name = "ScanFlowcellBarcode";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name = "ScanReagentKitBarcode";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name = "OverrideFlowcellBarcode";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name = "SendReagentKit";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StartRun_name = "StartRun";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name = "PauseScript";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name = "ResumeScript";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StopScript_name = "StopScript";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name = "AbortScript";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name = "RunScriptNow";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name = "GetScriptRunInfo";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name = "GetScriptMessages";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name = "SetupScriptFile";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name = "GetQCValues";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name = "SendSampleId";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name = "GetExperimentInfo";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name = "DownloadScriptFile";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_UIOperation_name = "UIOperation";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name = "GetAlarmMessages";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name = "GetLogMessages";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ClearAlarmMessages_name = "ClearAlarmMessages";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ReagentNeedle_name = "ReagentNeedle";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SendExperimentType_name = "SendExperimentType";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetBuzzerVolume_name = "SetBuzzerVolume";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name = "GetSequenceTypes";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name = "SetClearData";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StartRunLength_name = "StartRunLength";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetupRunInfo_name = "SetupRunInfo";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_MotorMove_name = "MotorMove";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name = "Authenicate";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name = "GetLanguage";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetLanguage_name = "SetLanguage";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetBaseCallIpAddr_name = "SetBaseCallIpAddr";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetZLIMSIpAddr_name = "SetZLIMSIpAddr";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name = "GetZLIMSAddr";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetCategoryParas_name = "SetCategoryParas";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name = "GetParaValue";
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StartSelfCheck_name = "StartSelfCheck";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_ids[2] =
{
    "::BGI::RPC::StageRunMgrIPCCallback",
    "::Ice::Object"
};
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_ops[] =
{
    "AddClient",
    "SendActionName",
    "SendAlarmMessageId",
    "SendDataList",
    "SendFlowcellBarcode",
    "SendLogMessageId",
    "SendPcntDone",
    "SendPositionNumber",
    "SendQCValue",
    "SendQCValues",
    "SendRemainingTime",
    "SendScriptMessageId",
    "SendScriptName",
    "SendScriptStatus",
    "SendStageMessage",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_AddClient_name = "AddClient";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptName_name = "SendScriptName";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendActionName_name = "SendActionName";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendFlowcellBarcode_name = "SendFlowcellBarcode";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendPositionNumber_name = "SendPositionNumber";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendPcntDone_name = "SendPcntDone";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptStatus_name = "SendScriptStatus";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptMessageId_name = "SendScriptMessageId";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendStageMessage_name = "SendStageMessage";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValue_name = "SendQCValue";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValues_name = "SendQCValues";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendAlarmMessageId_name = "SendAlarmMessageId";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendLogMessageId_name = "SendLogMessageId";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendRemainingTime_name = "SendRemainingTime";
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendDataList_name = "SendDataList";

}

bool
BGI::RPC::StageRunMgrIPC::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BGI_RPC_StageRunMgrIPC_ids, iceC_BGI_RPC_StageRunMgrIPC_ids + 2, s);
}

::std::vector<::std::string>
BGI::RPC::StageRunMgrIPC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_BGI_RPC_StageRunMgrIPC_ids[0], &iceC_BGI_RPC_StageRunMgrIPC_ids[2]);
}

::std::string
BGI::RPC::StageRunMgrIPC::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BGI::RPC::StageRunMgrIPC::ice_staticId()
{
    static const ::std::string typeId = "::BGI::RPC::StageRunMgrIPC";
    return typeId;
}

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetHeartbeat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->GetHeartbeat(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StartSetup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->StartSetup(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SaveSelectedScriptFileName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_strFileName;
    istr->readAll(iceP_strFileName);
    inS.endReadParams();
    this->SaveSelectedScriptFileName(::std::move(iceP_strFileName), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ScanFlowcellBarcode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->ScanFlowcellBarcode(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ScanReagentKitBarcode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->ScanReagentKitBarcode(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_OverrideFlowcellBarcode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_barcode;
    istr->readAll(iceP_barcode);
    inS.endReadParams();
    this->OverrideFlowcellBarcode(::std::move(iceP_barcode), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SendReagentKit(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_reagentKit;
    istr->readAll(iceP_reagentKit);
    inS.endReadParams();
    this->SendReagentKit(::std::move(iceP_reagentKit), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StartRun(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->StartRun(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_PauseScript(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->PauseScript(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ResumeScript(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->ResumeScript(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StopScript(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->StopScript(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_AbortScript(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->AbortScript(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_RunScriptNow(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_strFileName;
    istr->readAll(iceP_strFileName);
    inS.endReadParams();
    int ret = this->RunScriptNow(::std::move(iceP_strFileName), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetScriptRunInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_scriptRunId;
    istr->readAll(iceP_scriptRunId);
    inS.endReadParams();
    ScriptRunInfo ret = this->GetScriptRunInfo(iceP_scriptRunId, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetScriptMessages(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_startMessageId;
    istr->readAll(iceP_startMessageId);
    inS.endReadParams();
    MessageArray ret = this->GetScriptMessages(iceP_startMessageId, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetupScriptFile(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msgType;
    istr->readAll(iceP_msgType);
    inS.endReadParams();
    this->SetupScriptFile(::std::move(iceP_msgType), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetQCValues(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_qcMetricName;
    int iceP_startCycleNum;
    istr->readAll(iceP_qcMetricName, iceP_startCycleNum);
    inS.endReadParams();
    QCDataValues ret = this->GetQCValues(::std::move(iceP_qcMetricName), iceP_startCycleNum, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SendSampleId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_sampleId;
    istr->readAll(iceP_sampleId);
    inS.endReadParams();
    this->SendSampleId(::std::move(iceP_sampleId), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetExperimentInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ExperimentInfo ret = this->GetExperimentInfo(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_DownloadScriptFile(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string iceP_workFlowScript;
    ::std::string iceP_imageScript;
    ::std::string iceP_biochemistryScript;
    this->DownloadScriptFile(iceP_workFlowScript, iceP_imageScript, iceP_biochemistryScript, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_workFlowScript, iceP_imageScript, iceP_biochemistryScript);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_UIOperation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::string iceP_datetime;
    ::std::string iceP_errorcode;
    istr->readAll(iceP_message, iceP_datetime, iceP_errorcode);
    inS.endReadParams();
    this->UIOperation(::std::move(iceP_message), ::std::move(iceP_datetime), ::std::move(iceP_errorcode), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetAlarmMessages(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_startMessageId;
    istr->readAll(iceP_startMessageId);
    inS.endReadParams();
    AlarmMessageList ret = this->GetAlarmMessages(iceP_startMessageId, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetLogMessages(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_startMessageId;
    istr->readAll(iceP_startMessageId);
    inS.endReadParams();
    LogMessageList ret = this->GetLogMessages(iceP_startMessageId, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ClearAlarmMessages(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ClearAlarmMessageIds iceP_ids;
    istr->readAll(iceP_ids);
    inS.endReadParams();
    this->ClearAlarmMessages(::std::move(iceP_ids), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ReagentNeedle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_UP;
    istr->readAll(iceP_UP);
    inS.endReadParams();
    this->ReagentNeedle(iceP_UP, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SendExperimentType(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_experimentType;
    istr->readAll(iceP_experimentType);
    inS.endReadParams();
    this->SendExperimentType(::std::move(iceP_experimentType), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetBuzzerVolume(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_frenquency;
    istr->readAll(iceP_frenquency);
    inS.endReadParams();
    this->SetBuzzerVolume(iceP_frenquency, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetSequenceTypes(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_sampleId;
    istr->readAll(iceP_sampleId);
    inS.endReadParams();
    SequenceTypes ret = this->GetSequenceTypes(::std::move(iceP_sampleId), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetClearData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    DataList iceP_datas;
    istr->readAll(iceP_datas);
    inS.endReadParams();
    bool ret = this->SetClearData(::std::move(iceP_datas), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StartRunLength(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_read1length;
    int iceP_read2length;
    int iceP_bardcodelength;
    istr->readAll(iceP_read1length, iceP_read2length, iceP_bardcodelength);
    inS.endReadParams();
    this->StartRunLength(iceP_read1length, iceP_read2length, iceP_bardcodelength, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetupRunInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    RunInfo iceP_runInfo;
    istr->readAll(iceP_runInfo);
    inS.endReadParams();
    this->SetupRunInfo(::std::move(iceP_runInfo), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_MotorMove(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MotorTypeEnum iceP_motor;
    bool iceP_up;
    istr->readAll(iceP_motor, iceP_up);
    inS.endReadParams();
    this->MotorMove(iceP_motor, iceP_up, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_Authenicate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userName;
    ::std::string iceP_password;
    istr->readAll(iceP_userName, iceP_password);
    inS.endReadParams();
    LoginedInfo ret = this->Authenicate(::std::move(iceP_userName), ::std::move(iceP_password), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetLanguage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->GetLanguage(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetLanguage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_language;
    istr->readAll(iceP_language);
    inS.endReadParams();
    this->SetLanguage(::std::move(iceP_language), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetBaseCallIpAddr(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_ipAddr;
    int iceP_port;
    istr->readAll(iceP_ipAddr, iceP_port);
    inS.endReadParams();
    this->SetBaseCallIpAddr(::std::move(iceP_ipAddr), iceP_port, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetZLIMSIpAddr(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_ipAddr;
    int iceP_port;
    istr->readAll(iceP_ipAddr, iceP_port);
    inS.endReadParams();
    this->SetZLIMSIpAddr(::std::move(iceP_ipAddr), iceP_port, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetZLIMSAddr(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    IpAddr ret = this->GetZLIMSAddr(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetCategoryParas(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_category;
    ParaDict iceP_paraDict;
    istr->readAll(iceP_category, iceP_paraDict);
    inS.endReadParams();
    this->SetCategoryParas(::std::move(iceP_category), ::std::move(iceP_paraDict), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetParaValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_category;
    ::std::string iceP_paraName;
    istr->readAll(iceP_category, iceP_paraName);
    inS.endReadParams();
    ::std::string ret = this->GetParaValue(::std::move(iceP_category), ::std::move(iceP_paraName), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StartSelfCheck(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    DeviceCheckTypeEnum iceP_checkType;
    istr->readAll(iceP_checkType);
    inS.endReadParams();
    this->StartSelfCheck(iceP_checkType, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BGI_RPC_StageRunMgrIPC_ops, iceC_BGI_RPC_StageRunMgrIPC_ops + 45, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BGI_RPC_StageRunMgrIPC_ops)
    {
        case 0:
        {
            return _iceD_AbortScript(in, current);
        }
        case 1:
        {
            return _iceD_Authenicate(in, current);
        }
        case 2:
        {
            return _iceD_ClearAlarmMessages(in, current);
        }
        case 3:
        {
            return _iceD_DownloadScriptFile(in, current);
        }
        case 4:
        {
            return _iceD_GetAlarmMessages(in, current);
        }
        case 5:
        {
            return _iceD_GetExperimentInfo(in, current);
        }
        case 6:
        {
            return _iceD_GetHeartbeat(in, current);
        }
        case 7:
        {
            return _iceD_GetLanguage(in, current);
        }
        case 8:
        {
            return _iceD_GetLogMessages(in, current);
        }
        case 9:
        {
            return _iceD_GetParaValue(in, current);
        }
        case 10:
        {
            return _iceD_GetQCValues(in, current);
        }
        case 11:
        {
            return _iceD_GetScriptMessages(in, current);
        }
        case 12:
        {
            return _iceD_GetScriptRunInfo(in, current);
        }
        case 13:
        {
            return _iceD_GetSequenceTypes(in, current);
        }
        case 14:
        {
            return _iceD_GetZLIMSAddr(in, current);
        }
        case 15:
        {
            return _iceD_MotorMove(in, current);
        }
        case 16:
        {
            return _iceD_OverrideFlowcellBarcode(in, current);
        }
        case 17:
        {
            return _iceD_PauseScript(in, current);
        }
        case 18:
        {
            return _iceD_ReagentNeedle(in, current);
        }
        case 19:
        {
            return _iceD_ResumeScript(in, current);
        }
        case 20:
        {
            return _iceD_RunScriptNow(in, current);
        }
        case 21:
        {
            return _iceD_SaveSelectedScriptFileName(in, current);
        }
        case 22:
        {
            return _iceD_ScanFlowcellBarcode(in, current);
        }
        case 23:
        {
            return _iceD_ScanReagentKitBarcode(in, current);
        }
        case 24:
        {
            return _iceD_SendExperimentType(in, current);
        }
        case 25:
        {
            return _iceD_SendReagentKit(in, current);
        }
        case 26:
        {
            return _iceD_SendSampleId(in, current);
        }
        case 27:
        {
            return _iceD_SetBaseCallIpAddr(in, current);
        }
        case 28:
        {
            return _iceD_SetBuzzerVolume(in, current);
        }
        case 29:
        {
            return _iceD_SetCategoryParas(in, current);
        }
        case 30:
        {
            return _iceD_SetClearData(in, current);
        }
        case 31:
        {
            return _iceD_SetLanguage(in, current);
        }
        case 32:
        {
            return _iceD_SetZLIMSIpAddr(in, current);
        }
        case 33:
        {
            return _iceD_SetupRunInfo(in, current);
        }
        case 34:
        {
            return _iceD_SetupScriptFile(in, current);
        }
        case 35:
        {
            return _iceD_StartRun(in, current);
        }
        case 36:
        {
            return _iceD_StartRunLength(in, current);
        }
        case 37:
        {
            return _iceD_StartSelfCheck(in, current);
        }
        case 38:
        {
            return _iceD_StartSetup(in, current);
        }
        case 39:
        {
            return _iceD_StopScript(in, current);
        }
        case 40:
        {
            return _iceD_UIOperation(in, current);
        }
        case 41:
        {
            return _iceD_ice_id(in, current);
        }
        case 42:
        {
            return _iceD_ice_ids(in, current);
        }
        case 43:
        {
            return _iceD_ice_isA(in, current);
        }
        case 44:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
BGI::RPC::StageRunMgrIPCCallback::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BGI_RPC_StageRunMgrIPCCallback_ids, iceC_BGI_RPC_StageRunMgrIPCCallback_ids + 2, s);
}

::std::vector<::std::string>
BGI::RPC::StageRunMgrIPCCallback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_BGI_RPC_StageRunMgrIPCCallback_ids[0], &iceC_BGI_RPC_StageRunMgrIPCCallback_ids[2]);
}

::std::string
BGI::RPC::StageRunMgrIPCCallback::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BGI::RPC::StageRunMgrIPCCallback::ice_staticId()
{
    static const ::std::string typeId = "::BGI::RPC::StageRunMgrIPCCallback";
    return typeId;
}

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_AddClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Identity iceP_ident;
    istr->readAll(iceP_ident);
    inS.endReadParams();
    this->AddClient(::std::move(iceP_ident), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendScriptName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_scriptName;
    istr->readAll(iceP_scriptName);
    inS.endReadParams();
    this->SendScriptName(::std::move(iceP_scriptName), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendActionName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_actionName;
    istr->readAll(iceP_actionName);
    inS.endReadParams();
    this->SendActionName(::std::move(iceP_actionName), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendFlowcellBarcode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_flowcellBarcode;
    istr->readAll(iceP_flowcellBarcode);
    inS.endReadParams();
    this->SendFlowcellBarcode(::std::move(iceP_flowcellBarcode), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendPositionNumber(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_cycleNum;
    istr->readAll(iceP_cycleNum);
    inS.endReadParams();
    this->SendPositionNumber(iceP_cycleNum, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendPcntDone(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_pctDone;
    istr->readAll(iceP_pctDone);
    inS.endReadParams();
    this->SendPcntDone(iceP_pctDone, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendScriptStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ScriptStateEnum iceP_curState;
    istr->readAll(iceP_curState);
    inS.endReadParams();
    this->SendScriptStatus(iceP_curState, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendScriptMessageId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_messageId;
    istr->readAll(iceP_messageId);
    inS.endReadParams();
    this->SendScriptMessageId(iceP_messageId, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendStageMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msgType;
    ::std::string iceP_message;
    istr->readAll(iceP_msgType, iceP_message);
    inS.endReadParams();
    this->SendStageMessage(::std::move(iceP_msgType), ::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendQCValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QCDataValue iceP_qcValue;
    istr->readAll(iceP_qcValue);
    inS.endReadParams();
    this->SendQCValue(::std::move(iceP_qcValue), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendQCValues(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QCDataValues iceP_qcValues;
    istr->readAll(iceP_qcValues);
    inS.endReadParams();
    this->SendQCValues(::std::move(iceP_qcValues), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendAlarmMessageId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_messageId;
    istr->readAll(iceP_messageId);
    inS.endReadParams();
    this->SendAlarmMessageId(iceP_messageId, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendLogMessageId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_messageId;
    istr->readAll(iceP_messageId);
    inS.endReadParams();
    this->SendLogMessageId(iceP_messageId, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendRemainingTime(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    double iceP_remainingTimeMinute;
    istr->readAll(iceP_remainingTimeMinute);
    inS.endReadParams();
    this->SendRemainingTime(iceP_remainingTimeMinute, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendDataList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    DataList iceP_datas;
    istr->readAll(iceP_datas);
    inS.endReadParams();
    this->SendDataList(::std::move(iceP_datas), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BGI_RPC_StageRunMgrIPCCallback_ops, iceC_BGI_RPC_StageRunMgrIPCCallback_ops + 19, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BGI_RPC_StageRunMgrIPCCallback_ops)
    {
        case 0:
        {
            return _iceD_AddClient(in, current);
        }
        case 1:
        {
            return _iceD_SendActionName(in, current);
        }
        case 2:
        {
            return _iceD_SendAlarmMessageId(in, current);
        }
        case 3:
        {
            return _iceD_SendDataList(in, current);
        }
        case 4:
        {
            return _iceD_SendFlowcellBarcode(in, current);
        }
        case 5:
        {
            return _iceD_SendLogMessageId(in, current);
        }
        case 6:
        {
            return _iceD_SendPcntDone(in, current);
        }
        case 7:
        {
            return _iceD_SendPositionNumber(in, current);
        }
        case 8:
        {
            return _iceD_SendQCValue(in, current);
        }
        case 9:
        {
            return _iceD_SendQCValues(in, current);
        }
        case 10:
        {
            return _iceD_SendRemainingTime(in, current);
        }
        case 11:
        {
            return _iceD_SendScriptMessageId(in, current);
        }
        case 12:
        {
            return _iceD_SendScriptName(in, current);
        }
        case 13:
        {
            return _iceD_SendScriptStatus(in, current);
        }
        case 14:
        {
            return _iceD_SendStageMessage(in, current);
        }
        case 15:
        {
            return _iceD_ice_id(in, current);
        }
        case 16:
        {
            return _iceD_ice_ids(in, current);
        }
        case 17:
        {
            return _iceD_ice_isA(in, current);
        }
        case 18:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetHeartbeat(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_StartSetup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SaveSelectedScriptFileName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_strFileName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_strFileName);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_ScanFlowcellBarcode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_ScanReagentKitBarcode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_OverrideFlowcellBarcode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_barcode, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_barcode);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SendReagentKit(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_reagentKit, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reagentKit);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_StartRun(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_StartRun_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_StartRun_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_PauseScript(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_ResumeScript(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_StopScript(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_StopScript_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_StopScript_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_AbortScript(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_RunScriptNow(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::string& iceP_strFileName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_strFileName);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetScriptRunInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::ScriptRunInfo>>& outAsync, int iceP_scriptRunId, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_scriptRunId);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetScriptMessages(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::MessageArray>>& outAsync, int iceP_startMessageId, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_startMessageId);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SetupScriptFile(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_msgType, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msgType);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetQCValues(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::QCDataValues>>& outAsync, const ::std::string& iceP_qcMetricName, int iceP_startCycleNum, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_qcMetricName, iceP_startCycleNum);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SendSampleId(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_sampleId, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_sampleId);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BGIRemoteException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetExperimentInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::ExperimentInfo>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_DownloadScriptFile(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StageRunMgrIPC::DownloadScriptFileResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            StageRunMgrIPC::DownloadScriptFileResult v;
            istr->readAll(v.workFlowScript, v.imageScript, v.biochemistryScript);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_UIOperation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::string& iceP_datetime, const ::std::string& iceP_errorcode, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_UIOperation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_datetime, iceP_errorcode);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetAlarmMessages(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::AlarmMessageList>>& outAsync, int iceP_startMessageId, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_startMessageId);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetLogMessages(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::LogMessageList>>& outAsync, int iceP_startMessageId, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_startMessageId);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_ClearAlarmMessages(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ClearAlarmMessageIds& iceP_ids, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_ClearAlarmMessages_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ids);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_ReagentNeedle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_UP, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_ReagentNeedle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_UP);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SendExperimentType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_experimentType, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SendExperimentType_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_experimentType);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SetBuzzerVolume(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_frenquency, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetBuzzerVolume_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_frenquency);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetSequenceTypes(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::SequenceTypes>>& outAsync, const ::std::string& iceP_sampleId, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_sampleId);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SetClearData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const DataList& iceP_datas, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_datas);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_StartRunLength(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_read1length, int iceP_read2length, int iceP_bardcodelength, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_StartRunLength_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_read1length, iceP_read2length, iceP_bardcodelength);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SetupRunInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const RunInfo& iceP_runInfo, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetupRunInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_runInfo);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_MotorMove(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, MotorTypeEnum iceP_motor, bool iceP_up, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_MotorMove_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_motor, iceP_up);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_Authenicate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::LoginedInfo>>& outAsync, const ::std::string& iceP_userName, const ::std::string& iceP_password, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userName, iceP_password);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetLanguage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SetLanguage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_language, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetLanguage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_language);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SetBaseCallIpAddr(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_ipAddr, int iceP_port, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetBaseCallIpAddr_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ipAddr, iceP_port);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SetZLIMSIpAddr(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_ipAddr, int iceP_port, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetZLIMSIpAddr_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ipAddr, iceP_port);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetZLIMSAddr(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BGI::RPC::IpAddr>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_SetCategoryParas(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_category, const ParaDict& iceP_paraDict, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetCategoryParas_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_category, iceP_paraDict);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_GetParaValue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_category, const ::std::string& iceP_paraName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name);
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_category, iceP_paraName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCPrx::_iceI_StartSelfCheck(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, DeviceCheckTypeEnum iceP_checkType, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPC_StartSelfCheck_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_checkType);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
BGI::RPC::StageRunMgrIPCPrx::_newInstance() const
{
    return ::IceInternal::createProxy<StageRunMgrIPCPrx>();
}
/// \endcond

const ::std::string&
BGI::RPC::StageRunMgrIPCPrx::ice_staticId()
{
    return StageRunMgrIPC::ice_staticId();
}

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_AddClient(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Identity& iceP_ident, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_AddClient_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ident);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendScriptName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_scriptName, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_scriptName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendActionName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_actionName, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendActionName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_actionName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendFlowcellBarcode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_flowcellBarcode, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendFlowcellBarcode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_flowcellBarcode);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendPositionNumber(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_cycleNum, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendPositionNumber_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_cycleNum);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendPcntDone(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_pctDone, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendPcntDone_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pctDone);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendScriptStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, ScriptStateEnum iceP_curState, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptStatus_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_curState);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendScriptMessageId(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_messageId, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptMessageId_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_messageId);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendStageMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_msgType, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendStageMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msgType, iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendQCValue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const QCDataValue& iceP_qcValue, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_qcValue);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendQCValues(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const QCDataValues& iceP_qcValues, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValues_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_qcValues);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendAlarmMessageId(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_messageId, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendAlarmMessageId_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_messageId);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendLogMessageId(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_messageId, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendLogMessageId_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_messageId);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendRemainingTime(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, double iceP_remainingTimeMinute, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendRemainingTime_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_remainingTimeMinute);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::StageRunMgrIPCCallbackPrx::_iceI_SendDataList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const DataList& iceP_datas, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendDataList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_datas);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
BGI::RPC::StageRunMgrIPCCallbackPrx::_newInstance() const
{
    return ::IceInternal::createProxy<StageRunMgrIPCCallbackPrx>();
}
/// \endcond

const ::std::string&
BGI::RPC::StageRunMgrIPCCallbackPrx::ice_staticId()
{
    return StageRunMgrIPCCallback::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

namespace
{

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name = "GetHeartbeat";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name = "StartSetup";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name = "SaveSelectedScriptFileName";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name = "ScanFlowcellBarcode";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name = "ScanReagentKitBarcode";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name = "OverrideFlowcellBarcode";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name = "SendReagentKit";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StartRun_name = "StartRun";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name = "PauseScript";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name = "ResumeScript";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StopScript_name = "StopScript";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name = "AbortScript";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name = "RunScriptNow";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name = "GetScriptRunInfo";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name = "GetScriptMessages";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name = "SetupScriptFile";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name = "GetQCValues";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name = "SendSampleId";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name = "GetExperimentInfo";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name = "DownloadScriptFile";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_UIOperation_name = "UIOperation";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name = "GetAlarmMessages";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name = "GetLogMessages";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ClearAlarmMessages_name = "ClearAlarmMessages";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ReagentNeedle_name = "ReagentNeedle";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SendExperimentType_name = "SendExperimentType";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetBuzzerVolume_name = "SetBuzzerVolume";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name = "GetSequenceTypes";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name = "SetClearData";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StartRunLength_name = "StartRunLength";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetupRunInfo_name = "SetupRunInfo";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_MotorMove_name = "MotorMove";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name = "Authenicate";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name = "GetLanguage";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetLanguage_name = "SetLanguage";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetBaseCallIpAddr_name = "SetBaseCallIpAddr";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetZLIMSIpAddr_name = "SetZLIMSIpAddr";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name = "GetZLIMSAddr";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_SetCategoryParas_name = "SetCategoryParas";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name = "GetParaValue";

const ::std::string iceC_BGI_RPC_StageRunMgrIPC_StartSelfCheck_name = "StartSelfCheck";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_AddClient_name = "AddClient";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptName_name = "SendScriptName";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendActionName_name = "SendActionName";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendFlowcellBarcode_name = "SendFlowcellBarcode";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendPositionNumber_name = "SendPositionNumber";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendPcntDone_name = "SendPcntDone";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptStatus_name = "SendScriptStatus";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptMessageId_name = "SendScriptMessageId";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendStageMessage_name = "SendStageMessage";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValue_name = "SendQCValue";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValues_name = "SendQCValues";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendAlarmMessageId_name = "SendAlarmMessageId";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendLogMessageId_name = "SendLogMessageId";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendRemainingTime_name = "SendRemainingTime";

const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_SendDataList_name = "SendDataList";

}

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::BGI::RPC::upCast(StageRunMgrIPC* p) { return p; }

void
::IceProxy::BGI::RPC::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< StageRunMgrIPC>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new StageRunMgrIPC;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetHeartbeat(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetHeartbeat(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetHeartbeat_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_StartSetup(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_StartSetup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_StartSetup_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SaveSelectedScriptFileName(const ::std::string& iceP_strFileName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_strFileName);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SaveSelectedScriptFileName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_SaveSelectedScriptFileName_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_ScanFlowcellBarcode(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_ScanFlowcellBarcode(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_ScanFlowcellBarcode_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_ScanReagentKitBarcode(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_ScanReagentKitBarcode(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_ScanReagentKitBarcode_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_OverrideFlowcellBarcode(const ::std::string& iceP_barcode, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_barcode);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_OverrideFlowcellBarcode(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_OverrideFlowcellBarcode_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SendReagentKit(const ::std::string& iceP_reagentKit, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_reagentKit);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SendReagentKit(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_SendReagentKit_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_StartRun(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_StartRun_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_StartRun_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_StartRun_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_StartRun_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_StartRun(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_StartRun_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_PauseScript(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_PauseScript(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_PauseScript_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_ResumeScript(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_ResumeScript(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_ResumeScript_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_StopScript(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_StopScript_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_StopScript_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_StopScript_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_StopScript_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_StopScript(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_StopScript_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_AbortScript(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_AbortScript(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_AbortScript_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_RunScriptNow(const ::std::string& iceP_strFileName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_strFileName);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::BGI::RPC::StageRunMgrIPC::end_RunScriptNow(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_RunScriptNow_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetScriptRunInfo(::Ice::Int iceP_scriptRunId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_scriptRunId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::ScriptRunInfo
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetScriptRunInfo(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetScriptRunInfo_name);
    ::BGI::RPC::ScriptRunInfo ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetScriptMessages(::Ice::Int iceP_startMessageId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_startMessageId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::MessageArray
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetScriptMessages(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetScriptMessages_name);
    ::BGI::RPC::MessageArray ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SetupScriptFile(const ::std::string& iceP_msgType, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_msgType);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SetupScriptFile(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_SetupScriptFile_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetQCValues(const ::std::string& iceP_qcMetricName, ::Ice::Int iceP_startCycleNum, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_qcMetricName);
        ostr->write(iceP_startCycleNum);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::QCDataValues
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetQCValues(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetQCValues_name);
    ::BGI::RPC::QCDataValues ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SendSampleId(const ::std::string& iceP_sampleId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_sampleId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SendSampleId(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_SendSampleId_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BGI::RPC::BGIRemoteException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetExperimentInfo(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::ExperimentInfo
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetExperimentInfo(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetExperimentInfo_name);
    ::BGI::RPC::ExperimentInfo ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_DownloadScriptFile(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_DownloadScriptFile(::std::string& iceP_workFlowScript, ::std::string& iceP_imageScript, ::std::string& iceP_biochemistryScript, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_workFlowScript);
    istr->read(iceP_imageScript);
    istr->read(iceP_biochemistryScript);
    result->_endReadParams();
}

void IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_end_DownloadScriptFile(::std::string& iceP_workFlowScript, ::std::string& iceP_imageScript, ::std::string& iceP_biochemistryScript, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_DownloadScriptFile_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_workFlowScript);
    istr->read(iceP_imageScript);
    istr->read(iceP_biochemistryScript);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_UIOperation(const ::std::string& iceP_message, const ::std::string& iceP_datetime, const ::std::string& iceP_errorcode, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_UIOperation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_UIOperation_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_datetime);
        ostr->write(iceP_errorcode);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_UIOperation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_UIOperation(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_UIOperation_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetAlarmMessages(::Ice::Int iceP_startMessageId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_startMessageId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::AlarmMessageList
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetAlarmMessages(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetAlarmMessages_name);
    ::BGI::RPC::AlarmMessageList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetLogMessages(::Ice::Int iceP_startMessageId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_startMessageId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::LogMessageList
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetLogMessages(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetLogMessages_name);
    ::BGI::RPC::LogMessageList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_ClearAlarmMessages(const ::BGI::RPC::ClearAlarmMessageIds& iceP_ids, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_ClearAlarmMessages_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_ClearAlarmMessages_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ids);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_ClearAlarmMessages_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_ClearAlarmMessages(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_ClearAlarmMessages_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_ReagentNeedle(bool iceP_UP, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_ReagentNeedle_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_ReagentNeedle_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_UP);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_ReagentNeedle_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_ReagentNeedle(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_ReagentNeedle_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SendExperimentType(const ::std::string& iceP_experimentType, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SendExperimentType_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SendExperimentType_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_experimentType);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SendExperimentType_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SendExperimentType(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_SendExperimentType_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SetBuzzerVolume(::Ice::Int iceP_frenquency, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SetBuzzerVolume_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SetBuzzerVolume_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_frenquency);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetBuzzerVolume_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SetBuzzerVolume(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_SetBuzzerVolume_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetSequenceTypes(const ::std::string& iceP_sampleId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_sampleId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::SequenceTypes
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetSequenceTypes(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetSequenceTypes_name);
    ::BGI::RPC::SequenceTypes ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SetClearData(const ::BGI::RPC::DataList& iceP_datas, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_datas);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::BGI::RPC::StageRunMgrIPC::end_SetClearData(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_SetClearData_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_StartRunLength(::Ice::Int iceP_read1length, ::Ice::Int iceP_read2length, ::Ice::Int iceP_bardcodelength, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_StartRunLength_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_StartRunLength_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_read1length);
        ostr->write(iceP_read2length);
        ostr->write(iceP_bardcodelength);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_StartRunLength_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_StartRunLength(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_StartRunLength_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SetupRunInfo(const ::BGI::RPC::RunInfo& iceP_runInfo, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SetupRunInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SetupRunInfo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_runInfo);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetupRunInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SetupRunInfo(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_SetupRunInfo_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_MotorMove(::BGI::RPC::MotorTypeEnum iceP_motor, bool iceP_up, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_MotorMove_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_MotorMove_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_motor);
        ostr->write(iceP_up);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_MotorMove_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_MotorMove(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_MotorMove_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_Authenicate(const ::std::string& iceP_userName, const ::std::string& iceP_password, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userName);
        ostr->write(iceP_password);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::LoginedInfo
IceProxy::BGI::RPC::StageRunMgrIPC::end_Authenicate(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_Authenicate_name);
    ::BGI::RPC::LoginedInfo ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetLanguage(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetLanguage(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetLanguage_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SetLanguage(const ::std::string& iceP_language, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SetLanguage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SetLanguage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_language);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetLanguage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SetLanguage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_SetLanguage_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SetBaseCallIpAddr(const ::std::string& iceP_ipAddr, ::Ice::Int iceP_port, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SetBaseCallIpAddr_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SetBaseCallIpAddr_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ipAddr);
        ostr->write(iceP_port);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetBaseCallIpAddr_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SetBaseCallIpAddr(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_SetBaseCallIpAddr_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SetZLIMSIpAddr(const ::std::string& iceP_ipAddr, ::Ice::Int iceP_port, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SetZLIMSIpAddr_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SetZLIMSIpAddr_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ipAddr);
        ostr->write(iceP_port);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetZLIMSIpAddr_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SetZLIMSIpAddr(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_SetZLIMSIpAddr_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetZLIMSAddr(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BGI::RPC::IpAddr
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetZLIMSAddr(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetZLIMSAddr_name);
    ::BGI::RPC::IpAddr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_SetCategoryParas(const ::std::string& iceP_category, const ::BGI::RPC::ParaDict& iceP_paraDict, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_SetCategoryParas_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_SetCategoryParas_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_category);
        ostr->write(iceP_paraDict);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_SetCategoryParas_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_SetCategoryParas(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_SetCategoryParas_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_GetParaValue(const ::std::string& iceP_category, const ::std::string& iceP_paraName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_category);
        ostr->write(iceP_paraName);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::BGI::RPC::StageRunMgrIPC::end_GetParaValue(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BGI_RPC_StageRunMgrIPC_GetParaValue_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPC::_iceI_begin_StartSelfCheck(::BGI::RPC::DeviceCheckTypeEnum iceP_checkType, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPC_StartSelfCheck_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPC_StartSelfCheck_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_checkType);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPC_StartSelfCheck_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPC::end_StartSelfCheck(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPC_StartSelfCheck_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::BGI::RPC::StageRunMgrIPC::_newInstance() const
{
    return new StageRunMgrIPC;
}
/// \endcond

const ::std::string&
IceProxy::BGI::RPC::StageRunMgrIPC::ice_staticId()
{
    return ::BGI::RPC::StageRunMgrIPC::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::BGI::RPC::upCast(StageRunMgrIPCCallback* p) { return p; }

void
::IceProxy::BGI::RPC::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< StageRunMgrIPCCallback>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new StageRunMgrIPCCallback;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_AddClient(const ::Ice::Identity& iceP_ident, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_AddClient_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_AddClient_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ident);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_AddClient_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_AddClient(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_AddClient_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendScriptName(const ::std::string& iceP_scriptName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_scriptName);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendScriptName(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptName_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendActionName(const ::std::string& iceP_actionName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendActionName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendActionName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_actionName);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendActionName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendActionName(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendActionName_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendFlowcellBarcode(const ::std::string& iceP_flowcellBarcode, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendFlowcellBarcode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendFlowcellBarcode_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_flowcellBarcode);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendFlowcellBarcode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendFlowcellBarcode(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendFlowcellBarcode_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendPositionNumber(::Ice::Int iceP_cycleNum, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendPositionNumber_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendPositionNumber_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_cycleNum);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendPositionNumber_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendPositionNumber(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendPositionNumber_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendPcntDone(::Ice::Int iceP_pctDone, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendPcntDone_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendPcntDone_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pctDone);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendPcntDone_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendPcntDone(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendPcntDone_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendScriptStatus(::BGI::RPC::ScriptStateEnum iceP_curState, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptStatus_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptStatus_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_curState);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptStatus_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendScriptStatus(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptStatus_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendScriptMessageId(::Ice::Int iceP_messageId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptMessageId_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptMessageId_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_messageId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptMessageId_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendScriptMessageId(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendScriptMessageId_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendStageMessage(const ::std::string& iceP_msgType, const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendStageMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendStageMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_msgType);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendStageMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendStageMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendStageMessage_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendQCValue(const ::BGI::RPC::QCDataValue& iceP_qcValue, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValue_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValue_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_qcValue);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValue_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendQCValue(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValue_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendQCValues(const ::BGI::RPC::QCDataValues& iceP_qcValues, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValues_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValues_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_qcValues);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValues_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendQCValues(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendQCValues_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendAlarmMessageId(::Ice::Int iceP_messageId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendAlarmMessageId_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendAlarmMessageId_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_messageId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendAlarmMessageId_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendAlarmMessageId(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendAlarmMessageId_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendLogMessageId(::Ice::Int iceP_messageId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendLogMessageId_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendLogMessageId_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_messageId);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendLogMessageId_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendLogMessageId(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendLogMessageId_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendRemainingTime(::Ice::Double iceP_remainingTimeMinute, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendRemainingTime_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendRemainingTime_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_remainingTimeMinute);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendRemainingTime_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendRemainingTime(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendRemainingTime_name);
}

::Ice::AsyncResultPtr
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_iceI_begin_SendDataList(const ::BGI::RPC::DataList& iceP_datas, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BGI_RPC_StageRunMgrIPCCallback_SendDataList_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BGI_RPC_StageRunMgrIPCCallback_SendDataList_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_datas);
        result->endWriteParams();
        result->invoke(iceC_BGI_RPC_StageRunMgrIPCCallback_SendDataList_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BGI::RPC::StageRunMgrIPCCallback::end_SendDataList(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BGI_RPC_StageRunMgrIPCCallback_SendDataList_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::BGI::RPC::StageRunMgrIPCCallback::_newInstance() const
{
    return new StageRunMgrIPCCallback;
}
/// \endcond

const ::std::string&
IceProxy::BGI::RPC::StageRunMgrIPCCallback::ice_staticId()
{
    return ::BGI::RPC::StageRunMgrIPCCallback::ice_staticId();
}

BGI::RPC::StageRunMgrIPC::~StageRunMgrIPC()
{
}

/// \cond INTERNAL
::Ice::Object* BGI::RPC::upCast(StageRunMgrIPC* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_ids[2] =
{
    "::BGI::RPC::StageRunMgrIPC",
    "::Ice::Object"
};

}

bool
BGI::RPC::StageRunMgrIPC::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BGI_RPC_StageRunMgrIPC_ids, iceC_BGI_RPC_StageRunMgrIPC_ids + 2, s);
}

::std::vector< ::std::string>
BGI::RPC::StageRunMgrIPC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_BGI_RPC_StageRunMgrIPC_ids[0], &iceC_BGI_RPC_StageRunMgrIPC_ids[2]);
}

const ::std::string&
BGI::RPC::StageRunMgrIPC::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BGI::RPC::StageRunMgrIPC::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::BGI::RPC::StageRunMgrIPC";
    return typeId;
#else
    return iceC_BGI_RPC_StageRunMgrIPC_ids[0];
#endif
}

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetHeartbeat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->GetHeartbeat(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StartSetup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->StartSetup(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SaveSelectedScriptFileName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_strFileName;
    istr->read(iceP_strFileName);
    inS.endReadParams();
    this->SaveSelectedScriptFileName(iceP_strFileName, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ScanFlowcellBarcode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->ScanFlowcellBarcode(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ScanReagentKitBarcode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->ScanReagentKitBarcode(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_OverrideFlowcellBarcode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_barcode;
    istr->read(iceP_barcode);
    inS.endReadParams();
    this->OverrideFlowcellBarcode(iceP_barcode, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SendReagentKit(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_reagentKit;
    istr->read(iceP_reagentKit);
    inS.endReadParams();
    this->SendReagentKit(iceP_reagentKit, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StartRun(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->StartRun(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_PauseScript(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->PauseScript(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ResumeScript(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->ResumeScript(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StopScript(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->StopScript(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_AbortScript(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->AbortScript(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_RunScriptNow(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_strFileName;
    istr->read(iceP_strFileName);
    inS.endReadParams();
    ::Ice::Int ret = this->RunScriptNow(iceP_strFileName, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetScriptRunInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_scriptRunId;
    istr->read(iceP_scriptRunId);
    inS.endReadParams();
    ScriptRunInfo ret = this->GetScriptRunInfo(iceP_scriptRunId, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetScriptMessages(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_startMessageId;
    istr->read(iceP_startMessageId);
    inS.endReadParams();
    MessageArray ret = this->GetScriptMessages(iceP_startMessageId, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetupScriptFile(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_msgType;
    istr->read(iceP_msgType);
    inS.endReadParams();
    this->SetupScriptFile(iceP_msgType, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetQCValues(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_qcMetricName;
    ::Ice::Int iceP_startCycleNum;
    istr->read(iceP_qcMetricName);
    istr->read(iceP_startCycleNum);
    inS.endReadParams();
    QCDataValues ret = this->GetQCValues(iceP_qcMetricName, iceP_startCycleNum, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SendSampleId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_sampleId;
    istr->read(iceP_sampleId);
    inS.endReadParams();
    this->SendSampleId(iceP_sampleId, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetExperimentInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ExperimentInfo ret = this->GetExperimentInfo(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_DownloadScriptFile(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string iceP_workFlowScript;
    ::std::string iceP_imageScript;
    ::std::string iceP_biochemistryScript;
    this->DownloadScriptFile(iceP_workFlowScript, iceP_imageScript, iceP_biochemistryScript, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_workFlowScript);
    ostr->write(iceP_imageScript);
    ostr->write(iceP_biochemistryScript);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_UIOperation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::string iceP_datetime;
    ::std::string iceP_errorcode;
    istr->read(iceP_message);
    istr->read(iceP_datetime);
    istr->read(iceP_errorcode);
    inS.endReadParams();
    this->UIOperation(iceP_message, iceP_datetime, iceP_errorcode, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetAlarmMessages(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_startMessageId;
    istr->read(iceP_startMessageId);
    inS.endReadParams();
    AlarmMessageList ret = this->GetAlarmMessages(iceP_startMessageId, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetLogMessages(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_startMessageId;
    istr->read(iceP_startMessageId);
    inS.endReadParams();
    LogMessageList ret = this->GetLogMessages(iceP_startMessageId, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ClearAlarmMessages(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ClearAlarmMessageIds iceP_ids;
    istr->read(iceP_ids);
    inS.endReadParams();
    this->ClearAlarmMessages(iceP_ids, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_ReagentNeedle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_UP;
    istr->read(iceP_UP);
    inS.endReadParams();
    this->ReagentNeedle(iceP_UP, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SendExperimentType(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_experimentType;
    istr->read(iceP_experimentType);
    inS.endReadParams();
    this->SendExperimentType(iceP_experimentType, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetBuzzerVolume(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_frenquency;
    istr->read(iceP_frenquency);
    inS.endReadParams();
    this->SetBuzzerVolume(iceP_frenquency, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetSequenceTypes(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_sampleId;
    istr->read(iceP_sampleId);
    inS.endReadParams();
    SequenceTypes ret = this->GetSequenceTypes(iceP_sampleId, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetClearData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    DataList iceP_datas;
    istr->read(iceP_datas);
    inS.endReadParams();
    bool ret = this->SetClearData(iceP_datas, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StartRunLength(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_read1length;
    ::Ice::Int iceP_read2length;
    ::Ice::Int iceP_bardcodelength;
    istr->read(iceP_read1length);
    istr->read(iceP_read2length);
    istr->read(iceP_bardcodelength);
    inS.endReadParams();
    this->StartRunLength(iceP_read1length, iceP_read2length, iceP_bardcodelength, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetupRunInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RunInfo iceP_runInfo;
    istr->read(iceP_runInfo);
    inS.endReadParams();
    this->SetupRunInfo(iceP_runInfo, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_MotorMove(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MotorTypeEnum iceP_motor;
    bool iceP_up;
    istr->read(iceP_motor);
    istr->read(iceP_up);
    inS.endReadParams();
    this->MotorMove(iceP_motor, iceP_up, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_Authenicate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_userName;
    ::std::string iceP_password;
    istr->read(iceP_userName);
    istr->read(iceP_password);
    inS.endReadParams();
    LoginedInfo ret = this->Authenicate(iceP_userName, iceP_password, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetLanguage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->GetLanguage(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetLanguage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_language;
    istr->read(iceP_language);
    inS.endReadParams();
    this->SetLanguage(iceP_language, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetBaseCallIpAddr(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_ipAddr;
    ::Ice::Int iceP_port;
    istr->read(iceP_ipAddr);
    istr->read(iceP_port);
    inS.endReadParams();
    this->SetBaseCallIpAddr(iceP_ipAddr, iceP_port, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetZLIMSIpAddr(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_ipAddr;
    ::Ice::Int iceP_port;
    istr->read(iceP_ipAddr);
    istr->read(iceP_port);
    inS.endReadParams();
    this->SetZLIMSIpAddr(iceP_ipAddr, iceP_port, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetZLIMSAddr(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    IpAddr ret = this->GetZLIMSAddr(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_SetCategoryParas(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_category;
    ParaDict iceP_paraDict;
    istr->read(iceP_category);
    istr->read(iceP_paraDict);
    inS.endReadParams();
    this->SetCategoryParas(iceP_category, iceP_paraDict, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_GetParaValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_category;
    ::std::string iceP_paraName;
    istr->read(iceP_category);
    istr->read(iceP_paraName);
    inS.endReadParams();
    ::std::string ret = this->GetParaValue(iceP_category, iceP_paraName, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceD_StartSelfCheck(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    DeviceCheckTypeEnum iceP_checkType;
    istr->read(iceP_checkType);
    inS.endReadParams();
    this->StartSelfCheck(iceP_checkType, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_BGI_RPC_StageRunMgrIPC_all[] =
{
    "AbortScript",
    "Authenicate",
    "ClearAlarmMessages",
    "DownloadScriptFile",
    "GetAlarmMessages",
    "GetExperimentInfo",
    "GetHeartbeat",
    "GetLanguage",
    "GetLogMessages",
    "GetParaValue",
    "GetQCValues",
    "GetScriptMessages",
    "GetScriptRunInfo",
    "GetSequenceTypes",
    "GetZLIMSAddr",
    "MotorMove",
    "OverrideFlowcellBarcode",
    "PauseScript",
    "ReagentNeedle",
    "ResumeScript",
    "RunScriptNow",
    "SaveSelectedScriptFileName",
    "ScanFlowcellBarcode",
    "ScanReagentKitBarcode",
    "SendExperimentType",
    "SendReagentKit",
    "SendSampleId",
    "SetBaseCallIpAddr",
    "SetBuzzerVolume",
    "SetCategoryParas",
    "SetClearData",
    "SetLanguage",
    "SetZLIMSIpAddr",
    "SetupRunInfo",
    "SetupScriptFile",
    "StartRun",
    "StartRunLength",
    "StartSelfCheck",
    "StartSetup",
    "StopScript",
    "UIOperation",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPC::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BGI_RPC_StageRunMgrIPC_all, iceC_BGI_RPC_StageRunMgrIPC_all + 45, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BGI_RPC_StageRunMgrIPC_all)
    {
        case 0:
        {
            return _iceD_AbortScript(in, current);
        }
        case 1:
        {
            return _iceD_Authenicate(in, current);
        }
        case 2:
        {
            return _iceD_ClearAlarmMessages(in, current);
        }
        case 3:
        {
            return _iceD_DownloadScriptFile(in, current);
        }
        case 4:
        {
            return _iceD_GetAlarmMessages(in, current);
        }
        case 5:
        {
            return _iceD_GetExperimentInfo(in, current);
        }
        case 6:
        {
            return _iceD_GetHeartbeat(in, current);
        }
        case 7:
        {
            return _iceD_GetLanguage(in, current);
        }
        case 8:
        {
            return _iceD_GetLogMessages(in, current);
        }
        case 9:
        {
            return _iceD_GetParaValue(in, current);
        }
        case 10:
        {
            return _iceD_GetQCValues(in, current);
        }
        case 11:
        {
            return _iceD_GetScriptMessages(in, current);
        }
        case 12:
        {
            return _iceD_GetScriptRunInfo(in, current);
        }
        case 13:
        {
            return _iceD_GetSequenceTypes(in, current);
        }
        case 14:
        {
            return _iceD_GetZLIMSAddr(in, current);
        }
        case 15:
        {
            return _iceD_MotorMove(in, current);
        }
        case 16:
        {
            return _iceD_OverrideFlowcellBarcode(in, current);
        }
        case 17:
        {
            return _iceD_PauseScript(in, current);
        }
        case 18:
        {
            return _iceD_ReagentNeedle(in, current);
        }
        case 19:
        {
            return _iceD_ResumeScript(in, current);
        }
        case 20:
        {
            return _iceD_RunScriptNow(in, current);
        }
        case 21:
        {
            return _iceD_SaveSelectedScriptFileName(in, current);
        }
        case 22:
        {
            return _iceD_ScanFlowcellBarcode(in, current);
        }
        case 23:
        {
            return _iceD_ScanReagentKitBarcode(in, current);
        }
        case 24:
        {
            return _iceD_SendExperimentType(in, current);
        }
        case 25:
        {
            return _iceD_SendReagentKit(in, current);
        }
        case 26:
        {
            return _iceD_SendSampleId(in, current);
        }
        case 27:
        {
            return _iceD_SetBaseCallIpAddr(in, current);
        }
        case 28:
        {
            return _iceD_SetBuzzerVolume(in, current);
        }
        case 29:
        {
            return _iceD_SetCategoryParas(in, current);
        }
        case 30:
        {
            return _iceD_SetClearData(in, current);
        }
        case 31:
        {
            return _iceD_SetLanguage(in, current);
        }
        case 32:
        {
            return _iceD_SetZLIMSIpAddr(in, current);
        }
        case 33:
        {
            return _iceD_SetupRunInfo(in, current);
        }
        case 34:
        {
            return _iceD_SetupScriptFile(in, current);
        }
        case 35:
        {
            return _iceD_StartRun(in, current);
        }
        case 36:
        {
            return _iceD_StartRunLength(in, current);
        }
        case 37:
        {
            return _iceD_StartSelfCheck(in, current);
        }
        case 38:
        {
            return _iceD_StartSetup(in, current);
        }
        case 39:
        {
            return _iceD_StopScript(in, current);
        }
        case 40:
        {
            return _iceD_UIOperation(in, current);
        }
        case 41:
        {
            return _iceD_ice_id(in, current);
        }
        case 42:
        {
            return _iceD_ice_ids(in, current);
        }
        case 43:
        {
            return _iceD_ice_isA(in, current);
        }
        case 44:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
BGI::RPC::StageRunMgrIPC::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< StageRunMgrIPC, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
BGI::RPC::StageRunMgrIPC::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< StageRunMgrIPC, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::_icePatchObjectPtr(StageRunMgrIPCPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = StageRunMgrIPCPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(StageRunMgrIPC::ice_staticId(), v);
    }
}
/// \endcond

BGI::RPC::StageRunMgrIPCCallback::~StageRunMgrIPCCallback()
{
}

/// \cond INTERNAL
::Ice::Object* BGI::RPC::upCast(StageRunMgrIPCCallback* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_ids[2] =
{
    "::BGI::RPC::StageRunMgrIPCCallback",
    "::Ice::Object"
};

}

bool
BGI::RPC::StageRunMgrIPCCallback::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BGI_RPC_StageRunMgrIPCCallback_ids, iceC_BGI_RPC_StageRunMgrIPCCallback_ids + 2, s);
}

::std::vector< ::std::string>
BGI::RPC::StageRunMgrIPCCallback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_BGI_RPC_StageRunMgrIPCCallback_ids[0], &iceC_BGI_RPC_StageRunMgrIPCCallback_ids[2]);
}

const ::std::string&
BGI::RPC::StageRunMgrIPCCallback::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BGI::RPC::StageRunMgrIPCCallback::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::BGI::RPC::StageRunMgrIPCCallback";
    return typeId;
#else
    return iceC_BGI_RPC_StageRunMgrIPCCallback_ids[0];
#endif
}

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_AddClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Identity iceP_ident;
    istr->read(iceP_ident);
    inS.endReadParams();
    this->AddClient(iceP_ident, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendScriptName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_scriptName;
    istr->read(iceP_scriptName);
    inS.endReadParams();
    this->SendScriptName(iceP_scriptName, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendActionName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_actionName;
    istr->read(iceP_actionName);
    inS.endReadParams();
    this->SendActionName(iceP_actionName, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendFlowcellBarcode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_flowcellBarcode;
    istr->read(iceP_flowcellBarcode);
    inS.endReadParams();
    this->SendFlowcellBarcode(iceP_flowcellBarcode, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendPositionNumber(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_cycleNum;
    istr->read(iceP_cycleNum);
    inS.endReadParams();
    this->SendPositionNumber(iceP_cycleNum, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendPcntDone(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_pctDone;
    istr->read(iceP_pctDone);
    inS.endReadParams();
    this->SendPcntDone(iceP_pctDone, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendScriptStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ScriptStateEnum iceP_curState;
    istr->read(iceP_curState);
    inS.endReadParams();
    this->SendScriptStatus(iceP_curState, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendScriptMessageId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_messageId;
    istr->read(iceP_messageId);
    inS.endReadParams();
    this->SendScriptMessageId(iceP_messageId, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendStageMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_msgType;
    ::std::string iceP_message;
    istr->read(iceP_msgType);
    istr->read(iceP_message);
    inS.endReadParams();
    this->SendStageMessage(iceP_msgType, iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendQCValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    QCDataValue iceP_qcValue;
    istr->read(iceP_qcValue);
    inS.endReadParams();
    this->SendQCValue(iceP_qcValue, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendQCValues(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    QCDataValues iceP_qcValues;
    istr->read(iceP_qcValues);
    inS.endReadParams();
    this->SendQCValues(iceP_qcValues, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendAlarmMessageId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_messageId;
    istr->read(iceP_messageId);
    inS.endReadParams();
    this->SendAlarmMessageId(iceP_messageId, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendLogMessageId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_messageId;
    istr->read(iceP_messageId);
    inS.endReadParams();
    this->SendLogMessageId(iceP_messageId, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendRemainingTime(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Double iceP_remainingTimeMinute;
    istr->read(iceP_remainingTimeMinute);
    inS.endReadParams();
    this->SendRemainingTime(iceP_remainingTimeMinute, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceD_SendDataList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    DataList iceP_datas;
    istr->read(iceP_datas);
    inS.endReadParams();
    this->SendDataList(iceP_datas, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_BGI_RPC_StageRunMgrIPCCallback_all[] =
{
    "AddClient",
    "SendActionName",
    "SendAlarmMessageId",
    "SendDataList",
    "SendFlowcellBarcode",
    "SendLogMessageId",
    "SendPcntDone",
    "SendPositionNumber",
    "SendQCValue",
    "SendQCValues",
    "SendRemainingTime",
    "SendScriptMessageId",
    "SendScriptName",
    "SendScriptStatus",
    "SendStageMessage",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
BGI::RPC::StageRunMgrIPCCallback::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BGI_RPC_StageRunMgrIPCCallback_all, iceC_BGI_RPC_StageRunMgrIPCCallback_all + 19, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BGI_RPC_StageRunMgrIPCCallback_all)
    {
        case 0:
        {
            return _iceD_AddClient(in, current);
        }
        case 1:
        {
            return _iceD_SendActionName(in, current);
        }
        case 2:
        {
            return _iceD_SendAlarmMessageId(in, current);
        }
        case 3:
        {
            return _iceD_SendDataList(in, current);
        }
        case 4:
        {
            return _iceD_SendFlowcellBarcode(in, current);
        }
        case 5:
        {
            return _iceD_SendLogMessageId(in, current);
        }
        case 6:
        {
            return _iceD_SendPcntDone(in, current);
        }
        case 7:
        {
            return _iceD_SendPositionNumber(in, current);
        }
        case 8:
        {
            return _iceD_SendQCValue(in, current);
        }
        case 9:
        {
            return _iceD_SendQCValues(in, current);
        }
        case 10:
        {
            return _iceD_SendRemainingTime(in, current);
        }
        case 11:
        {
            return _iceD_SendScriptMessageId(in, current);
        }
        case 12:
        {
            return _iceD_SendScriptName(in, current);
        }
        case 13:
        {
            return _iceD_SendScriptStatus(in, current);
        }
        case 14:
        {
            return _iceD_SendStageMessage(in, current);
        }
        case 15:
        {
            return _iceD_ice_id(in, current);
        }
        case 16:
        {
            return _iceD_ice_ids(in, current);
        }
        case 17:
        {
            return _iceD_ice_isA(in, current);
        }
        case 18:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
BGI::RPC::StageRunMgrIPCCallback::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< StageRunMgrIPCCallback, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
BGI::RPC::StageRunMgrIPCCallback::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< StageRunMgrIPCCallback, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
BGI::RPC::_icePatchObjectPtr(StageRunMgrIPCCallbackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = StageRunMgrIPCCallbackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(StageRunMgrIPCCallback::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
