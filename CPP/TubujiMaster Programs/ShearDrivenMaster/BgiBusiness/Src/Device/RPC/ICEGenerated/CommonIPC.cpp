//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `CommonIPC.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "CommonIPC.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 8
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::BGI::RPC::BGIRemoteException> iceC_BGI_RPC_BGIRemoteException_init("::BGI::RPC::BGIRemoteException");

}

BGI::RPC::BGIRemoteException::~BGIRemoteException()
{
}

const ::std::string&
BGI::RPC::BGIRemoteException::ice_staticId()
{
    static const ::std::string typeId = "::BGI::RPC::BGIRemoteException";
    return typeId;
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::BGI::RPC::BGIRemoteException> iceC_BGI_RPC_BGIRemoteException_init("::BGI::RPC::BGIRemoteException");

}

BGI::RPC::BGIRemoteException::BGIRemoteException(const ::std::string& message) :
    ::Ice::UserException(),
    message(message)
{
}

#ifdef ICE_CPP11_COMPILER
BGI::RPC::BGIRemoteException::~BGIRemoteException()
{
}
#else
BGI::RPC::BGIRemoteException::~BGIRemoteException() throw()
{
}
#endif

::std::string
BGI::RPC::BGIRemoteException::ice_id() const
{
    return "::BGI::RPC::BGIRemoteException";
}

BGI::RPC::BGIRemoteException*
BGI::RPC::BGIRemoteException::ice_clone() const
{
    return new BGIRemoteException(*this);
}

void
BGI::RPC::BGIRemoteException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
BGI::RPC::BGIRemoteException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::BGI::RPC::BGIRemoteException", -1, true);
    ::Ice::StreamWriter< BGIRemoteException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
BGI::RPC::BGIRemoteException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< BGIRemoteException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace Ice
{
}

#endif
